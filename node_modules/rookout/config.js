"use strict";

const trueValues = ['y', 'Y', 'yes', 'Yes', 'YES', 'true', 'True', 'TRUE', '1', true];

class Config {
  constructor() {
    this.loadDefaults();
  }

  loadDefaults() {
    this.LoggingConfiguration = {
      LOGGER_NAME: "rook",
      FILE_NAME: "rookout/node-rook.log",
      LOG_TO_STDERR: false,
      LOG_LEVEL: "INFO",
      PROPAGATE_LOGS: false,
      DEBUG: false
    };
    this.VersionConfiguration = {
      VERSION: "0.41.0",
      COMMIT: "652ebf0e7b760e5f0f328ff866df80b62c2f5f61"
    };
    this.ControllerAddress = {
      HOST: "wss://control.rookout.com",
      PORT: 443
    };
    this.AgentComConfiguration = {
      BACK_OFF: 0.3,
      MAX_SLEEP: 60,
      MAX_MESSAGE_LENGTH: 1024 * 1024,
      TIMEOUT: 3,
      REQUEST_TIMEOUT_SECS: 30,
      CONNECT_TIMEOUT: 3,
      PING_TIMEOUT: 30,
      PING_INTERVAL: 10,
      RESET_BACKOFF_TIMEOUT: 3 * 60,
      MAX_QUEUED_MESSAGES: 100,
      MAX_QUEUED_MESSAGES_SIZE: 15 * 1024 * 1024,
      WAIT_MESSAGE_CHECK_INTERVAL: 700,
      SEND_RESOLVE_TIMEOUT: 500
    };
    this.OutputWsConfiguration = {
      BUCKET_REFRESH_RATE: 10,
      MAX_AUG_MESSAGES: 100,
      MAX_LOG_ITEMS: 200,
      MAX_STATUS_UPDATES: 200
    };
    this.InstrumentationConfig = {
      MIN_TIME_BETWEEN_HITS_MS: 100,
      MAX_AUG_TIME_MS: 400,
      AUG_RATE_LIMITER_MINIMUM_DURATION_TIME_NS: 1000 * 1000,
      MAX_SCRIPTS_COUNT_FAIL_SAFE: 20000,
      MAX_SCRIPTS_SIZE_FAIL_SAFE: 75 * 1000 * 1000,
      CLEANUP_ASYNC_CALLSTACK_INTERVAL_MILLISECONDS: 250
    };
    this.GitConfiguration = {
      GIT_COMMIT: null,
      GIT_ORIGIN: null,
      SOURCES: null
    };
    this.MonitorConfiguration = {
      ENABLED: false,
      CPU_CHECK_GAP: 500
    };
    this.HeapSnapshotConfiguration = {
      SIGNAL: "SIGUSR1",
      HEAP_PATH: null
    };
    this.MemoryUsageLogService = {
      ENABLED: false,
      LOG_FILE: null,
      TRACE_GC_ENABLED: false,
      INTERVAL_SECONDS: 60
    };
    this.LogHandlerService = {
      ENABLED: false,
      CONSOLE_FUNCTIONS_HOOK_ENABLED: false
    };
    this.DebuggerService = {
      WAIT_SECONDS_TO_CLOSE_DEBUGGER_AFTER_NO_AUGS: 600
    };
    this.DumpConfig = {
      STRING_CACHE_USERMESSAGE: false
    };
  }

  updateConfig(newConfig, configObject) {
    newConfig.forEach(function (v, k) {
      switch (k) {
        case "NODE_StringCache_UserMessage":
          configObject.DumpConfig.STRING_CACHE_USERMESSAGE = trueValues.indexOf(v) !== -1;
          break;
      }
    });
  }

}

module.exports = new Config();
//# sourceMappingURL=config.js.map