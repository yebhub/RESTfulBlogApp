{"version":3,"sources":["../../src/TriggerServices.js"],"names":["config","require","TriggerServices","constructor","locationServices","collectionServices","loadServices","getService","name","removeAug","augId","reapplyAugAfterTemporaryRemoval","aug","removeAugTemporarily","duration","clearAugs","Object","keys","start","close","locationServicesToClose","values","collectionServicesToClose","location_service","collection_service","DebuggerService","e","logger","exception","MemoryUsageLogService","ENABLED","debug","memoryUsageLogService","MonitorConfiguration","monitorService","SystemDataCollector","LogHandlerService","loggingService","LoggingService"],"mappings":"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","sourcesContent":["import {DebuggerService} from \"./services/DebuggerService\";\r\n\r\nimport {logger} from \"./logger\";\r\nconst config = require(\"./config\");\r\nimport {MemoryUsageLogService} from \"./services/MemoryUsageLogService\";\r\nimport {SystemDataCollector} from \"./services/SystemDataCollector\";\r\nimport {LoggingService} from \"./services/LoggingService\";\r\n\r\n\r\nexport default class TriggerServices {\r\n\r\n    constructor() {\r\n        this.locationServices = {};\r\n        this.collectionServices = {};\r\n\r\n        this.loadServices();\r\n    }\r\n\r\n    getService(name) {\r\n        return this.locationServices[name];\r\n    }\r\n\r\n    removeAug(augId) {\r\n        for (let name in this.locationServices) {\r\n            this.locationServices[name].removeAug(augId);\r\n        }\r\n    }\r\n\r\n    reapplyAugAfterTemporaryRemoval(aug) {\r\n        for (let name in this.locationServices) {\r\n            this.locationServices[name].reapplyAugAfterTemporaryRemoval(aug);\r\n        }\r\n    }\r\n\r\n    removeAugTemporarily(augId, duration) {\r\n        for (let name in this.locationServices) {\r\n            this.locationServices[name].removeAugTemporarily(augId, duration);\r\n        }\r\n    }\r\n\r\n    clearAugs() {\r\n        for (let name of Object.keys(this.locationServices)) {\r\n            this.locationServices[name].clearAugs();\r\n        }\r\n    }\r\n\r\n    start() {\r\n        this.loadServices();\r\n    }\r\n\r\n    async close() {\r\n        const locationServicesToClose = [...Object.values(this.locationServices)];\r\n        const collectionServicesToClose =[...Object.values(this.collectionServices)];\r\n\r\n        this.locationServices = {};\r\n        this.collectionServices = {};\r\n\r\n        for (let location_service of locationServicesToClose) {\r\n            await location_service.close();\r\n        }\r\n\r\n        for (let collection_service of collectionServicesToClose) {\r\n            collection_service.close();\r\n        }\r\n\r\n    }\r\n\r\n    loadServices() {\r\n        try {\r\n            this.locationServices['DebuggerService'] = new DebuggerService();\r\n        } catch (e) {\r\n            logger.exception(\"Error starting location based services\", e);\r\n        }\r\n\r\n        if (config.MemoryUsageLogService.ENABLED) {\r\n            try {\r\n                logger.debug('Starting memory usage log service');\r\n                let memoryUsageLogService = new MemoryUsageLogService();\r\n                memoryUsageLogService.start();\r\n                this.collectionServices['MemoryUsageLogService'] = memoryUsageLogService;\r\n            } catch (e) {\r\n                logger.exception(\"Error starting memory usage log service\", e);\r\n            }\r\n        }\r\n\r\n        if (config.MonitorConfiguration.ENABLED) {\r\n            try {\r\n                logger.debug('Starting monitor Service');\r\n                let monitorService = new SystemDataCollector();\r\n                monitorService.start();\r\n                this.collectionServices['MonitorService'] = monitorService;\r\n            } catch (e) {\r\n                logger.exception(\"Error starting monitor service\", e);\r\n            }\r\n        }\r\n\r\n        if (config.LogHandlerService.ENABLED) {\r\n            try {\r\n                logger.debug('Starting Logging Service')\r\n\r\n                let loggingService = new LoggingService();\r\n                loggingService.start()\r\n                this.locationServices['loggingService'] = loggingService;\r\n            } catch (e) {\r\n                logger.exception(\"Error starting logging service\", e);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"],"file":"TriggerServices.js"}