"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InspectorTracebackNamespace = void 0;

var _Namespace = _interopRequireDefault(require("./Namespace"));

var _InspectorFrameNamespace = _interopRequireDefault(require("./InspectorFrameNamespace"));

var _JSObjectNamespace = _interopRequireDefault(require("./JSObjectNamespace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const variant_pb = require('../../protobuf/variant_pb');

class InspectorTracebackNamespace extends _Namespace.default {
  constructor(inspector, callFrames, depth) {
    super();
    this.inspector = inspector;
    this.callFrames = callFrames;
    this.depth = depth;
  }

  readKey(key) {
    return new _InspectorFrameNamespace.default(this.inspector, this.callFrames[key]);
  }

  callMethod(name, args) {
    switch (name) {
      case "size":
        return new _JSObjectNamespace.default(this.depth);

      default:
        return super.callMethod(name, args);
    }
  }

  dump(variant, namespaceSerializer = null) {
    variant.setVariantType(variant_pb.Variant.Type.VARIANT_TRACEBACK);
    let traceback = new variant_pb.Variant.Traceback();

    for (let i = 0; i < this.depth; ++i) {
      const position = this.inspector.resolvePosition(this.callFrames[i]);
      let frame = new variant_pb.Variant.CodeObject();

      if (namespaceSerializer === null) {
        frame.setName(position.function);
        frame.setFilename(position.filename);
        frame.setModule(position.filename);
      } else {
        frame.setNameIndexInCache(namespaceSerializer.getStringIndexInCache(position.function));
        frame.setFilenameIndexInCache(namespaceSerializer.getStringIndexInCache(position.filename));
        frame.setModuleIndexInCache(namespaceSerializer.getStringIndexInCache(position.filename));
      }

      frame.setLineno(position.line);
      traceback.addLocations(frame);
    }

    variant.setTraceback(traceback);
  }

}

exports.InspectorTracebackNamespace = InspectorTracebackNamespace;
//# sourceMappingURL=InspectorTracebackNamespace.js.map