{"version":3,"sources":["../../../src/com_ws/WebsocketClient.js"],"names":["config","require","WebsocketClient","constructor","url","proxy","token","_connection","_resolve","_reject","_error","_messages","_connectTimeout","_pingInterval","_pingTimeout","connect","Promise","resolve","reject","setPromiseHandlers","WebSocket","headers","VersionConfiguration","VERSION","COMMIT","agent","buildProxy","perMessageDeflate","setConnectTimeout","setResponseListeners","isConnected","readyState","OPEN","read","error","message","shift","send","timeout","setTimeout","RookSendFailedError","AgentComConfiguration","SEND_RESOLVE_TIMEOUT","unref","binary","err","clearTimeout","RookNotConnectedError","close","terminate","clearPingTimeout","clearPingInterval","clearConnectTimeout","HttpsProxyAgent","logger","debug","startsWith","on","_socket","setPingInterval","heartbeat","returnConnected","e","returnError","msg","returnMessage","req","resp","statusCode","warn","clearPromiseHandlers","length","MAX_QUEUED_MESSAGES","push","CONNECT_TIMEOUT","resetPingTimeout","PING_TIMEOUT","setInterval","ping","PING_INTERVAL","clearInterval"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nimport WebSocket from 'ws';\r\nimport {logger} from '../logger';\r\nimport {RookNotConnectedError, RookSendFailedError} from \"../exceptions\";\r\n\r\nconst config = require(\"../config\");\r\n\r\nexport default class WebsocketClient {\r\n\r\n    constructor(url, proxy, token) {\r\n        this.url = url;\r\n        this.proxy = proxy;\r\n        this.token = token;\r\n\r\n        this._connection = null;\r\n\r\n        this._resolve = null;\r\n        this._reject = null;\r\n        this._error = null;\r\n        this._messages = [];\r\n\r\n        this._connectTimeout = null;\r\n\r\n        this._pingInterval = null;\r\n        this._pingTimeout = null;\r\n    }\r\n\r\n    connect() {\r\n        return new Promise((resolve, reject) => {\r\n            this.setPromiseHandlers(resolve, reject);\r\n\r\n            this._connection = new WebSocket(this.url, {\r\n                headers: {\r\n                    \"User-Agent\": `RookoutAgent/${config.VersionConfiguration.VERSION}+${config.VersionConfiguration.COMMIT}`,\r\n                    \"X-Rookout-Token\": this.token\r\n                },\r\n                agent: this.buildProxy(),\r\n                perMessageDeflate: false\r\n            });\r\n\r\n            this.setConnectTimeout();\r\n            this.setResponseListeners();\r\n        })\r\n    }\r\n\r\n    isConnected() {\r\n        return this._connection && this._connection.readyState === WebSocket.OPEN;\r\n    }\r\n\r\n    read() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this._error) {\r\n                const error = this._error;\r\n                this._error = null;\r\n                reject(error);\r\n            }\r\n\r\n            const message = this._messages.shift();\r\n            if (message) {\r\n                resolve(message);\r\n            }\r\n\r\n            this.setPromiseHandlers(resolve, reject);\r\n        })\r\n    }\r\n\r\n    // DON'T LOG HERE - THIS FUNCTION IS INDIRECTLY CALLED FROM WITHIN THE LOGGER\r\n    // LOGGING HERE LEADS TO INFINITE RECURSION\r\n    send(message) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this._connection) {\r\n                // For cases the callback was not called\r\n                const timeout = setTimeout(() => {\r\n                    reject(new RookSendFailedError());\r\n                }, config.AgentComConfiguration.SEND_RESOLVE_TIMEOUT).unref();\r\n\r\n                this._connection.send(message, {binary: true}, (err) => {\r\n                    if (err) {\r\n                        reject(new RookSendFailedError());\r\n                    } else {\r\n                        resolve(); // send was successful\r\n                    }\r\n                    clearTimeout(timeout);\r\n                })\r\n            } else {\r\n                reject(new RookNotConnectedError());\r\n            }\r\n        });\r\n    }\r\n\r\n    close() {\r\n        if (this._connection) {\r\n            this._connection.terminate();\r\n            this._connection = null;\r\n        }\r\n\r\n        this.clearPingTimeout();\r\n        this.clearPingInterval();\r\n        this.clearConnectTimeout();\r\n    }\r\n\r\n    buildProxy() {\r\n        if (this.proxy === null) {\r\n            return false;\r\n        }\r\n        const HttpsProxyAgent = require('https-proxy-agent');\r\n\r\n        logger.debug(\"Connecting via proxy: %s\", this.proxy);\r\n\r\n        if (this.proxy.startsWith(\"http\")) {\r\n            return HttpsProxyAgent(this.proxy);\r\n        } else {\r\n            return HttpsProxyAgent(\"http://\" + this.proxy);\r\n        }\r\n    }\r\n\r\n    setResponseListeners() {\r\n        // Heartbeat runs on every ping and pong, as well as once on a new connection.\r\n\r\n        this._connection.on(\"open\", () => {\r\n            try {\r\n                logger.debug(\"Connection established\");\r\n                this.clearConnectTimeout();\r\n\r\n                // The socket does not exist before this point except internally - we can't access it.\r\n                // Upon a connection timeout (currently 2 seconds), the socket will be terminated.\r\n                if (this._connection) {\r\n                    this._connection._socket.unref();\r\n                }\r\n\r\n                // Set up pinging\r\n                this.setPingInterval();\r\n                this.heartbeat();\r\n\r\n                this.returnConnected();\r\n            } catch (e) {\r\n            }\r\n        });\r\n\r\n        this._connection.on(\"ping\", () => {\r\n            try {\r\n                this.heartbeat()\r\n            } catch (e) {\r\n            }\r\n        });\r\n\r\n        this._connection.on(\"pong\", () => {\r\n            try {\r\n                this.heartbeat()\r\n            } catch (e) {\r\n            }\r\n        });\r\n\r\n        this._connection.on(\"close\", () => {\r\n            try {\r\n                this.returnError('Connection closed');\r\n            } catch (e) {\r\n            }\r\n        });\r\n\r\n        this._connection.on(\"message\", msg => {\r\n            try {\r\n                this.returnMessage(msg);\r\n            } catch (e) {\r\n            }\r\n        });\r\n\r\n        // Connection errors (e.g. abrupt termination)\r\n        this._connection.on(\"error\", err => {\r\n            try {\r\n                this.returnError(err);\r\n            } catch (e) {\r\n            }\r\n        });\r\n\r\n        // Unexpected HTTP responses\r\n        this._connection.on(\"unexpected-response\", (req, resp) => {\r\n            try {\r\n                this.returnError({\r\n                    statusCode: resp.statusCode\r\n                });\r\n            } catch (e) {\r\n            }\r\n        });\r\n    }\r\n\r\n    setPromiseHandlers(resolve, reject) {\r\n        this._resolve = resolve;\r\n        this._reject = reject;\r\n    }\r\n\r\n    returnConnected() {\r\n        if (!this._resolve) {\r\n            logger.warn(\"Failed to return connected status\")\r\n        }\r\n\r\n        const resolve = this._resolve;\r\n        this.clearPromiseHandlers();\r\n        resolve();\r\n    }\r\n\r\n    returnError(error) {\r\n        this._error = error;\r\n        if (this._reject) {\r\n            const reject = this._reject;\r\n            this.clearPromiseHandlers();\r\n            reject(error);\r\n        }\r\n    }\r\n\r\n    returnMessage(message) {\r\n        if (this._resolve) {\r\n            const resolve = this._resolve;\r\n            this.clearPromiseHandlers();\r\n            resolve(message);\r\n        } else {\r\n            if (this._messages.length > config.AgentComConfiguration.MAX_QUEUED_MESSAGES) {\r\n                logger.warn(\"Too many incoming messages, discarding\");\r\n                return;\r\n            }\r\n\r\n            this._messages.push(message);\r\n        }\r\n    }\r\n\r\n    clearPromiseHandlers() {\r\n        this._resolve = null;\r\n        this._reject = null;\r\n    }\r\n\r\n    setConnectTimeout() {\r\n        this.clearConnectTimeout();\r\n\r\n        this._connectTimeout = setTimeout(() => {\r\n            try {\r\n                logger.error(\"WS connect timeout, closing connection\");\r\n                if (this._connection) {\r\n                    this._connection.terminate();\r\n                    this._connection = null;\r\n                }\r\n            } catch (e) {\r\n            }\r\n        }, config.AgentComConfiguration.CONNECT_TIMEOUT * 1000).unref();\r\n    }\r\n\r\n    clearConnectTimeout() {\r\n        if (this._connectTimeout) {\r\n            clearTimeout(this._connectTimeout);\r\n            this._connectTimeout = null;\r\n        }\r\n    }\r\n\r\n    resetPingTimeout() {\r\n        this.clearPingTimeout();\r\n\r\n        this._pingTimeout = setTimeout(() => {\r\n            try {\r\n                logger.error(\"WS ping timeout, closing connection\");\r\n                if (this._connection) {\r\n                    this._connection.terminate();\r\n                    this._connection = null;\r\n                }\r\n            } catch (e) {\r\n            }\r\n        }, config.AgentComConfiguration.PING_TIMEOUT * 1000).unref();\r\n    }\r\n\r\n    clearPingTimeout() {\r\n        if (this._pingTimeout) {\r\n            clearTimeout(this._pingTimeout);\r\n            this._pingTimeout = null;\r\n        }\r\n    }\r\n\r\n    setPingInterval() {\r\n        if (this._pingInterval) {\r\n            return;\r\n        }\r\n\r\n        this._pingInterval = setInterval(() => {\r\n            try {\r\n                if (this._connection && this._connection.readyState === WebSocket.OPEN) {\r\n                    this._connection.ping(() => {\r\n                    });\r\n                }\r\n            } catch (e) {\r\n            }\r\n        }, config.AgentComConfiguration.PING_INTERVAL * 1000).unref();\r\n    }\r\n\r\n    clearPingInterval() {\r\n        if (this._pingInterval) {\r\n            clearInterval(this._pingInterval);\r\n            this._pingInterval = null;\r\n        }\r\n    }\r\n\r\n    heartbeat() {\r\n        this.resetPingTimeout();\r\n    };\r\n}\r\n"],"file":"WebsocketClient.js"}