"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DebuggerService = require("./services/DebuggerService");

var _logger = require("./logger");

var _MemoryUsageLogService = require("./services/MemoryUsageLogService");

var _SystemDataCollector = require("./services/SystemDataCollector");

var _LoggingService = require("./services/LoggingService");

const config = require("./config");

class TriggerServices {
  constructor() {
    this.locationServices = {};
    this.collectionServices = {};
    this.loadServices();
  }

  getService(name) {
    return this.locationServices[name];
  }

  removeAug(augId) {
    for (let name in this.locationServices) {
      this.locationServices[name].removeAug(augId);
    }
  }

  reapplyAugAfterTemporaryRemoval(aug) {
    for (let name in this.locationServices) {
      this.locationServices[name].reapplyAugAfterTemporaryRemoval(aug);
    }
  }

  removeAugTemporarily(augId, duration) {
    for (let name in this.locationServices) {
      this.locationServices[name].removeAugTemporarily(augId, duration);
    }
  }

  clearAugs() {
    for (let name of Object.keys(this.locationServices)) {
      this.locationServices[name].clearAugs();
    }
  }

  start() {
    this.loadServices();
  }

  async close() {
    const locationServicesToClose = [...Object.values(this.locationServices)];
    const collectionServicesToClose = [...Object.values(this.collectionServices)];
    this.locationServices = {};
    this.collectionServices = {};

    for (let location_service of locationServicesToClose) {
      await location_service.close();
    }

    for (let collection_service of collectionServicesToClose) {
      collection_service.close();
    }
  }

  loadServices() {
    try {
      this.locationServices['DebuggerService'] = new _DebuggerService.DebuggerService();
    } catch (e) {
      _logger.logger.exception("Error starting location based services", e);
    }

    if (config.MemoryUsageLogService.ENABLED) {
      try {
        _logger.logger.debug('Starting memory usage log service');

        let memoryUsageLogService = new _MemoryUsageLogService.MemoryUsageLogService();
        memoryUsageLogService.start();
        this.collectionServices['MemoryUsageLogService'] = memoryUsageLogService;
      } catch (e) {
        _logger.logger.exception("Error starting memory usage log service", e);
      }
    }

    if (config.MonitorConfiguration.ENABLED) {
      try {
        _logger.logger.debug('Starting monitor Service');

        let monitorService = new _SystemDataCollector.SystemDataCollector();
        monitorService.start();
        this.collectionServices['MonitorService'] = monitorService;
      } catch (e) {
        _logger.logger.exception("Error starting monitor service", e);
      }
    }

    if (config.LogHandlerService.ENABLED) {
      try {
        _logger.logger.debug('Starting Logging Service');

        let loggingService = new _LoggingService.LoggingService();
        loggingService.start();
        this.locationServices['loggingService'] = loggingService;
      } catch (e) {
        _logger.logger.exception("Error starting logging service", e);
      }
    }
  }

}

exports.default = TriggerServices;
//# sourceMappingURL=TriggerServices.js.map