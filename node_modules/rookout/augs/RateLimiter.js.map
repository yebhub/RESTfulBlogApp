{"version":3,"sources":["../../../src/augs/RateLimiter.js"],"names":["config","require","RateLimiter","constructor","quota","window_size","windows","Map","calculateWindowKey","time","Math","floor","allow","now","undefined","cleanup","current_window_key","prev_window_key","current_window_usage","get","set","previous_window_usage","prev_weight","weighted_usage","record","start_time","duration","key","max","InstrumentationConfig","AUG_RATE_LIMITER_MINIMUM_DURATION_TIME_NS","size","delete"],"mappings":"AAAA;;;;;;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEe,MAAMC,WAAN,CAAkB;AAC7BC,EAAAA,WAAW,CAACC,KAAD,EAAQC,WAAR,EAAqB;AAC5B,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACH;;AAEDC,EAAAA,kBAAkB,CAACC,IAAD,EAAO;AACrB,WAAOC,IAAI,CAACC,KAAL,CAAWF,IAAI,GAAG,KAAKJ,WAAvB,IAAsC,KAAKA,WAAlD;AACH;;AAEDO,EAAAA,KAAK,CAACC,GAAD,EAAM;AACP,QAAI,KAAKR,WAAL,KAAqBS,SAAzB,EAAoC;AAChC,aAAO,IAAP;AACH;;AAED,SAAKC,OAAL,CAAaF,GAAb;AAEA,QAAIG,kBAAkB,GAAG,KAAKR,kBAAL,CAAwBK,GAAxB,CAAzB;AACA,QAAII,eAAe,GAAGD,kBAAkB,GAAG,KAAKX,WAAhD;AAEA,QAAIa,oBAAoB,GAAG,KAAKZ,OAAL,CAAaa,GAAb,CAAiBH,kBAAjB,CAA3B;;AAEA,QAAIE,oBAAoB,KAAKJ,SAA7B,EAAwC;AACpCI,MAAAA,oBAAoB,GAAG,CAAvB;AACA,WAAKZ,OAAL,CAAac,GAAb,CAAiBJ,kBAAjB,EAAqCE,oBAArC;AACH;;AAED,QAAIG,qBAAqB,GAAG,KAAKf,OAAL,CAAaa,GAAb,CAAiBF,eAAjB,CAA5B;;AAEA,QAAII,qBAAqB,KAAKP,SAA9B,EAAyC;AACrC,UAAII,oBAAoB,GAAG,KAAKd,KAAhC,EAAuC;AACnC,eAAO,KAAP;AACH;AACJ,KAJD,MAIO;AACH,UAAIkB,WAAW,GAAG,IAAI,CAACT,GAAG,GAAGG,kBAAP,IAA6B,KAAKX,WAAxD;AACA,UAAIkB,cAAc,GAAIF,qBAAqB,GAAGC,WAAzB,GAAwCJ,oBAA7D;;AAEA,UAAIK,cAAc,GAAG,KAAKnB,KAA1B,EAAiC;AAC7B,eAAO,KAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH;;AAEDoB,EAAAA,MAAM,CAACC,UAAD,EAAaC,QAAb,EAAuB;AACzB,QAAI,KAAKrB,WAAL,KAAqBS,SAAzB,EAAoC;AAChC;AACH;;AAED,QAAIa,GAAG,GAAG,KAAKnB,kBAAL,CAAwBiB,UAAxB,CAAV,CALyB,CAOzB;;AACAC,IAAAA,QAAQ,GAAGhB,IAAI,CAACkB,GAAL,CAAS5B,MAAM,CAAC6B,qBAAP,CAA6BC,yCAAtC,EAAiFJ,QAAjF,CAAX;AAEA,SAAKpB,OAAL,CAAac,GAAb,CAAiBO,GAAjB,EAAsB,KAAKrB,OAAL,CAAaa,GAAb,CAAiBQ,GAAjB,IAAwBD,QAA9C;AACH;;AAEDX,EAAAA,OAAO,CAACF,GAAD,EAAM;AACT,QAAI,KAAKP,OAAL,CAAayB,IAAb,GAAoB,EAAxB,EAA4B;AACxB,WAAK,IAAI,CAACJ,GAAD,CAAT,IAAmB,KAAKrB,OAAxB,EAAiC;AAC7B,YAAIqB,GAAG,GAAGd,GAAG,GAAG,KAAKR,WAAL,GAAmB,CAAnC,EAAsC;AAClC,eAAKC,OAAL,CAAa0B,MAAb,CAAoBL,GAApB;AACH;AACJ;AACJ;AACJ;;AAnE4B","sourcesContent":["'use strict';\n\nconst config = require('../config');\n\nexport default class RateLimiter {\n    constructor(quota, window_size) {\n        this.quota = quota;\n        this.window_size = window_size;\n        this.windows = new Map();\n    }\n\n    calculateWindowKey(time) {\n        return Math.floor(time / this.window_size) * this.window_size;\n    }\n\n    allow(now) {\n        if (this.window_size === undefined) {\n            return true;\n        }\n\n        this.cleanup(now);\n\n        let current_window_key = this.calculateWindowKey(now);\n        let prev_window_key = current_window_key - this.window_size;\n\n        let current_window_usage = this.windows.get(current_window_key);\n\n        if (current_window_usage === undefined) {\n            current_window_usage = 0;\n            this.windows.set(current_window_key, current_window_usage);\n        }\n\n        let previous_window_usage = this.windows.get(prev_window_key);\n\n        if (previous_window_usage === undefined) {\n            if (current_window_usage > this.quota) {\n                return false;\n            }\n        } else {\n            let prev_weight = 1 - (now - current_window_key) / this.window_size;\n            let weighted_usage = (previous_window_usage * prev_weight) + current_window_usage;\n\n            if (weighted_usage > this.quota) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    record(start_time, duration) {\n        if (this.window_size === undefined) {\n            return;\n        }\n\n        let key = this.calculateWindowKey(start_time);\n\n        // always at least 1ms\n        duration = Math.max(config.InstrumentationConfig.AUG_RATE_LIMITER_MINIMUM_DURATION_TIME_NS, duration);\n\n        this.windows.set(key, this.windows.get(key) + duration);\n    }\n\n    cleanup(now) {\n        if (this.windows.size > 10) {\n            for (let [key,] of this.windows) {\n                if (key < now - this.window_size * 5) {\n                    this.windows.delete(key);\n                }\n            }\n        }\n    }\n}\n"],"file":"RateLimiter.js"}