"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _RookError = _interopRequireDefault(require("../../processor/RookError"));

var _logger = require("../../logger");

var _exceptions = require("../../exceptions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const path = require('path');

const ALLOWED_EXTENSION = /\.([cm]?jsx?|tsx?|coffee)$/i;

class LocationFileLine {
  constructor(configuration, factory) {
    this.filename = configuration.filename;

    if (!(typeof this.filename === 'string' || this.filename instanceof String)) {
      throw new _exceptions.RookAugInvalidKey('filename'.configuration);
    }

    this.lineno = configuration.lineno;

    if (!Number.isInteger(this.lineno)) {
      throw new _exceptions.RookAugInvalidKey('lineno'.configuration);
    }

    this.fileHash = configuration.sha256 || null;
    this.lineCrc32 = configuration.line_crc32_2 || null; // If missing, we assume line is not unique

    this.lineUnique = configuration.line_unique || false;
    this.includeExternals = configuration.includeExternals; // If auto mode, guess based on file name

    if (null === this.includeExternals || undefined === this.includeExternals) {
      // If filename is not a string, we can't auto-detect
      if (typeof this.filename !== 'string' && !(this.filename instanceof String)) {
        this.includeExternals = false;
      } else {
        // Get folder name
        const folder = path.dirname(this.filename); // If folder exists and is not generic, it is safe to include externals

        this.includeExternals = folder !== '.' && folder !== 'lib' && folder !== 'src';
      }
    }
  }

  addAug(triggerServices, aug) {
    if (!this.isValidFilePath()) {
      _logger.logger.warn(`Discarding aug ${aug.id} due to bad file extension ${this.filename}`);

      aug.setRemoved();
      return;
    }

    let debuggerService = triggerServices.getService("DebuggerService");
    aug.setPending();
    debuggerService.registerNotification(aug, this.filename, this.fileHash, this.includeExternals, this.lineno, this.lineCrc32, this.lineUnique, matchInfo => {
      if (null !== matchInfo.script && undefined !== matchInfo.script) {
        try {
          if (matchInfo.error !== null) {
            throw matchInfo.error;
          }

          debuggerService.addAug(matchInfo, aug);
        } catch (e) {
          const message = "Exception when adding aug";

          _logger.logger.exception(message, e);

          aug.setError(new _RookError.default(e, message));
        }
      }
    }, () => {
      aug.setRemoved();
    });
  }

  isValidFilePath() {
    return this.filename.match(ALLOWED_EXTENSION);
  }

}

exports.default = LocationFileLine;
LocationFileLine.jsonName = "file_line";
//# sourceMappingURL=LocationFileLine.js.map