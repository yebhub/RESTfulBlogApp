"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Aug = _interopRequireDefault(require("./Aug"));

var _ActionRunProcessor = _interopRequireDefault(require("./actions/ActionRunProcessor"));

var _LocationFileLine = _interopRequireDefault(require("./locations/LocationFileLine"));

var _ProcessorFactory = _interopRequireDefault(require("../processor/ProcessorFactory"));

var _Condition = _interopRequireDefault(require("./conditions/Condition"));

var _exceptions = require("../exceptions");

var _LocationLogHandler = _interopRequireDefault(require("./locations/LocationLogHandler"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const config = require('../config');

const utils = require('../utils');

class AugFactory {
  constructor(output) {
    this.output = output;
    this.processorFactory = new _ProcessorFactory.default();
  }

  getAug(configuration, triggerServices) {
    const augId = configuration["id"];

    if (!(typeof augId === 'string' || augId instanceof String)) {
      throw new _exceptions.RookAugInvalidKey('id', configuration);
    }

    const jsonLocation = configuration["location"];

    if (null == jsonLocation) {
      throw new _exceptions.RookAugInvalidKey('location', configuration);
    }

    const location = this.getLocation(jsonLocation);
    const jsonAction = configuration["action"];

    if (null == jsonAction) {
      throw new _exceptions.RookAugInvalidKey('action', configuration);
    }

    const action = new _ActionRunProcessor.default(jsonAction, this.processorFactory);
    let condition;
    const conditionConfiguration = configuration['conditional'];

    if (null != conditionConfiguration) {
      condition = new _Condition.default(conditionConfiguration);
    }

    let maxAugTime = configuration.maxAugTime === 0 ? 0 : configuration.maxAugTime || config.InstrumentationConfig.MAX_AUG_TIME_MS;
    maxAugTime = utils.MSToNS(maxAugTime);
    let limitsSpec = configuration['rateLimit'];
    let limits = [];

    if (limitsSpec !== undefined && limitsSpec.includes('/')) {
      let limitMatches = limitsSpec.match(/^(\d+)\/(\d+)$/);

      if (limitMatches !== null) {
        limits = [utils.MSToNS(limitMatches[1]), utils.MSToNS(limitMatches[2])];
      }
    }

    if (limits.length === 0) {
      const defaultWindowQuote = utils.MSToNS(500);
      const defaultWindowSize = utils.MSToNS(5000);
      limits.push(defaultWindowQuote, defaultWindowSize);
    }

    return new _Aug.default(augId, location, action, condition, this.output, triggerServices, maxAugTime, limits);
  }

  getLocation(jsonLocation) {
    switch (jsonLocation.name) {
      case "file_line":
        return new _LocationFileLine.default(jsonLocation, this.processorFactory);

      case "log_handler":
        return new _LocationLogHandler.default(jsonLocation, this.processorFactory);

      default:
        throw new _exceptions.RookUnsupportedLocation(jsonLocation.name);
    }
  }

}

exports.default = AugFactory;
//# sourceMappingURL=AugFactory.js.map