{"version":3,"sources":["../../src/logger.js"],"names":["path","require","fs","util","config","LOG_LEVELS","Logger","constructor","process","argv","length","endsWith","LoggingConfiguration","LOG_TO_STDERR","LOG_LEVEL","output","handlers","buildHandlers","registerOutput","removeOutput","debug","message","log","arguments","info","warn","error","exception","rawArguments","level","levelno","indexOf","verbosity","formattedMessage","format","apply","value","Error","stack","e","caller","getCaller","args","Array","i","record","time","Date","filename","lineno","text","handler","printError","configLevel","toLowerCase","self","formatRecord","push","baseLogFilePath","FILE_NAME","absoluteFilePath","isAbsolute","platform","join","includes","path_dir","dirname","existsSync","mkdirSync","fd","openSync","writeSync","DEBUG","argsParameter","map","arg","JSObjectNamespace","ContainerNamespace","ListNamespace","sendLogMessage","result","oldPrepareStackTrace","prepareStackTrace","structuredStackTrace","callSite","getFileName","__filename","getLineno","fakeError","captureStackTrace","LogHandlerService","CONSOLE_FUNCTIONS_HOOK_ENABLED","console","stderr","write","logger"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport ContainerNamespace from \"./processor/namespaces/ContainerNamespace\";\nimport JSObjectNamespace from \"./processor/namespaces/JSObjectNamespace\";\nimport ListNamespace from './processor/namespaces/ListNamespace'\nimport {getEnv} from \"./utils\";\n\nconst path = require('path');\nconst fs = require('fs');\nconst util = require('util');\n\nconst config = require('./config');\n\nconst LOG_LEVELS = [\"debug\", \"info\", \"warning\", \"error\", \"critical\"];\n\nclass Logger {\n    constructor() {\n        if ((process.argv.length > 1 && process.argv[1].endsWith('rooks/node/rook/node_modules/jest/bin/jest.js'))) {\n            config.LoggingConfiguration.LOG_TO_STDERR = true;\n            config.LoggingConfiguration.LOG_LEVEL = \"debug\";\n        }\n\n        this.output = null;\n\n        this.handlers = this.buildHandlers();\n    }\n\n    registerOutput(output) {\n        this.output = output;\n    }\n\n    removeOutput(output) {\n        this.output = null;\n    }\n\n    debug(message) {\n        return this.log(message, arguments, \"debug\");\n    }\n\n    info(message) {\n        return this.log(message, arguments, \"info\");\n    }\n\n    warn(message) {\n        return this.log(message, arguments, \"warning\");\n    }\n\n    error(message) {\n        return this.log(message, arguments, \"error\");\n    }\n\n    exception(message) {\n        return this.log(message, arguments, \"error\");\n    }\n\n    log(message, rawArguments, level = \"info\") {\n        try {\n            let levelno = LOG_LEVELS.indexOf(level);\n            if (-1 === levelno) {\n                levelno = LOG_LEVELS.length;\n            }\n\n            if (levelno < this.verbosity) {\n                return;\n            }\n\n            let formattedMessage = message;\n            try {\n                formattedMessage = util.format.apply(this, rawArguments);\n\n                // Append error stacks to log\n                for (let value of rawArguments) {\n                    if (value instanceof Error) {\n                        formattedMessage += value.stack;\n                    }\n                }\n\n            } catch (e) {\n            }\n\n            let caller = this.getCaller();\n\n            let args = null;\n            if (rawArguments.length > 1) {\n                // Following this recommendation- http://code.fitness/post/2015/11/javascript-function-arguments-do-not-slice.html\n                args = new Array(rawArguments.length - 1);\n                for (let i = 1; i < rawArguments.length; ++i) {\n                    args[i - 1] = rawArguments[i];\n                }\n            }\n\n            const record = {\n                level: level,\n                levelno: levelno,\n                time: new Date(),\n                filename: caller.filename,\n                lineno: caller.lineno,\n                text: formattedMessage,\n                formattedMessage: formattedMessage,\n                args: args,\n            };\n\n            for (let handler of this.handlers) {\n                handler(record);\n            }\n        } catch (e) {\n            this.printError(\"[Rookout] Unexpected error when writing to log:\", e.message);\n            this.printError(e.stack);\n        }\n    }\n\n    buildHandlers() {\n        let configLevel = config.LoggingConfiguration.LOG_LEVEL;\n\n        if (\"warn\" === configLevel.toLowerCase()) {\n            configLevel = \"warning\";\n        }\n\n        this.verbosity = LOG_LEVELS.indexOf(configLevel.toLowerCase());\n\n        let self = this;\n\n        let handlers = [];\n\n        const formatRecord = function (record) {\n            return util.format('%s - %s@%d - %s - %s', record.time, record.filename, record.lineno,\n                record.level, record.formattedMessage);\n        };\n\n        if (config.LoggingConfiguration.LOG_TO_STDERR) {\n            handlers.push((record) => {\n                this.printError(formatRecord(record));\n            });\n\n            const baseLogFilePath = config.LoggingConfiguration.FILE_NAME;\n\n            if (null != baseLogFilePath && \"\" !== baseLogFilePath) {\n                // Calculate absolute log file path\n                let absoluteFilePath = \"\";\n                if (path.isAbsolute(baseLogFilePath)) {\n                    absoluteFilePath = baseLogFilePath;\n                } else {\n                    if ('win32' === process.platform) {\n                        absoluteFilePath = path.join(getEnv('USERPROFILE', '.'), baseLogFilePath);\n                    } else if (process.platform.includes('darwin')) {\n                        absoluteFilePath = path.join(getEnv('HOME', '.'), baseLogFilePath);\n                    } else {\n                        absoluteFilePath = path.join('/var/log', baseLogFilePath);\n                    }\n                }\n                try {\n                    let path_dir = path.dirname(absoluteFilePath);\n                    if (!fs.existsSync(path_dir)){\n                        fs.mkdirSync(path_dir);\n                    }\n\n                    let fd = fs.openSync(absoluteFilePath, 'a');\n                    handlers.push((record) => {\n                        fs.writeSync(fd, formatRecord(record) + '\\n');\n                    });\n                }\n                catch (e) {\n                    if (config.LoggingConfiguration.DEBUG) {\n                        this.printError(\"[Rookout] Failed to open log file: %s\", absoluteFilePath);\n                        this.printError(e.message);\n                        this.printError(e.stack || e);\n                    }\n                }\n            }\n        }\n\n        handlers.push((record) => {\n            if (null != self.output) {\n                let argsParameter = null;\n                if (record.args) {\n                    // We convert args to a ListNamespace to ensure all objects are deeply dumped\n                    let args = record.args.map(arg => new JSObjectNamespace(arg));\n                    argsParameter = new ContainerNamespace({args: new ListNamespace(args)});\n                }\n\n                self.output.sendLogMessage(record.levelno, record.time, record.filename, record.lineno,\n                    record.text, record.formattedMessage, argsParameter);\n            }\n        });\n\n        return handlers;\n    }\n\n    getCaller() {\n        let result = {\n            filename: null,\n            lineno: null\n        };\n\n        const oldPrepareStackTrace = Error.prepareStackTrace;\n\n        try {\n            Error.prepareStackTrace = (error, structuredStackTrace) => {\n                for (let callSite of structuredStackTrace) {\n                    if (callSite.getFileName() !== __filename) {\n                        result.filename = callSite.getFileName();\n                        result.lineno = callSite.getLineno();\n                        break;\n                    }\n                }\n            };\n\n            let fakeError = {};\n            Error.captureStackTrace(fakeError);\n        } catch (e) {\n        }\n\n        Error.prepareStackTrace = oldPrepareStackTrace;\n\n        return result;\n    }\n\n    printError(message) {\n        if (config.LogHandlerService.CONSOLE_FUNCTIONS_HOOK_ENABLED === false) {\n            console.error(message);\n        } else {\n            process.stderr.write(`${message}\\n`);\n        }\n    }\n\n}\n\nexport let logger = new Logger();\n"],"file":"logger.js"}