{"version":3,"sources":["../../src/utils.js"],"names":["path","require","process","NUM_OF_NANO_IN_SECONDS","StringUtils","trim","string","replace","strip","chars","charsArray","char","push","re","RegExp","join","getEnv","envName","defaultValue","env","canonizeFileName","filename","normalize","getTimeInNanoseconds","hrtime_result","hrtime","seconds","nanoseconds_remainder","MSToNS","milliseconds","NanosecToMillisec","nanoseconds","emptyCallack","getProcessTimeInMillisWithDecimal","hrTime","conditionalRequire","err","undefined"],"mappings":"AAAA;;;;;;;;;;;;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AAEA,MAAME,sBAAsB,GAAG,MAAM,CAArC;;AAEO,MAAMC,WAAN,CAAkB;AACV,SAAJC,IAAI,CAACC,MAAD,EAAS;AAChB,WAAOA,MAAM,CAACC,OAAP,CAAe,YAAf,EAA6B,EAA7B,CAAP;AACH;;AAED;AACJ;AACA;AACA;AACA;AACgB,SAALC,KAAK,CAACF,MAAD,EAASG,KAAT,EAAe;AACvB,UAAMC,UAAU,GAAG,EAAnB;;AACA,SAAI,IAAIC,IAAR,IAAgBF,KAAhB,EAAsB;AAClB,cAAQE,IAAR;AACI,aAAK,GAAL;AACA,aAAK,GAAL;AACA,aAAK,GAAL;AACA,aAAK,GAAL;AACID,UAAAA,UAAU,CAACE,IAAX,CAAgB,OAAOD,IAAvB;AACA;;AACJ;AACID,UAAAA,UAAU,CAACE,IAAX,CAAgBD,IAAhB;AARR;AAUH;;AACD,UAAME,EAAE,GAAGC,MAAM,CAAE,KAAIJ,UAAU,CAACK,IAAX,CAAgB,EAAhB,CAAoB,OAAML,UAAU,CAACK,IAAX,CAAgB,EAAhB,CAAoB,KAApD,EAA0D,GAA1D,CAAjB;AACA,WAAOT,MAAM,CAACC,OAAP,CAAeM,EAAf,EAAmB,EAAnB,CAAP;AACH;;AA1BoB;;;;AA6BlB,SAASG,MAAT,CAAgBC,OAAhB,EAAyBC,YAAzB,EAAuC;AAC1C,SAAOhB,OAAO,CAACiB,GAAR,CAAYF,OAAZ,KAAwBC,YAA/B;AACH;;AAEM,SAASE,gBAAT,CAA0BC,QAA1B,EAAoC;AACvC,SAAOrB,IAAI,CAACsB,SAAL,CAAeD,QAAQ,CAACd,OAAT,CAAiB,SAAjB,EAA4B,GAA5B,CAAf,CAAP;AACH;;AAEM,SAASgB,oBAAT,GAAgC;AACnC,MAAIC,aAAa,GAAGtB,OAAO,CAACuB,MAAR,EAApB;AACA,MAAIC,OAAO,GAAGF,aAAa,CAAC,CAAD,CAA3B;AACA,MAAIG,qBAAqB,GAAGH,aAAa,CAAC,CAAD,CAAzC;AACA,SAAQE,OAAO,GAAGvB,sBAAX,GAAqCwB,qBAA5C;AACH;;AAEM,SAASC,MAAT,CAAgBC,YAAhB,EAA8B;AACjC,SAAOA,YAAY,GAAG,OAAtB;AACH;;AAEM,SAASC,iBAAT,CAA2BC,WAA3B,EAAwC;AAC3C,SAAOA,WAAW,GAAG,OAArB;AACH;;AAEM,SAASC,YAAT,GAAwB,CAE9B;;AAEM,SAASC,iCAAT,GAA6C;AAChD;AACA,QAAMC,MAAM,GAAGhC,OAAO,CAACuB,MAAR,EAAf;AACA,SAAOS,MAAM,CAAC,CAAD,CAAN,GAAY,IAAZ,GAAmBA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAtC;AACH;;AAEM,SAASC,kBAAT,CAA4Bd,QAA5B,EAAsC;AACzC,MAAI;AACA,WAAOpB,OAAO,CAAE,GAAEoB,QAAS,EAAb,CAAd;AACH,GAFD,CAEE,OAAOe,GAAP,EAAY;AACV,WAAOC,SAAP;AACH;AACJ","sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst process = require('process');\n\nconst NUM_OF_NANO_IN_SECONDS = 10 ** 9;\n\nexport class StringUtils {\n    static trim(string) {\n        return string.replace(/^\\s+|\\s+$/g, '');\n    };\n\n    /***\n     * Strip a string on both ends from specific chars\n     * @param string\n     * @param chars\n     */\n    static strip(string, chars){\n        const charsArray = [];\n        for(let char of chars){\n            switch (char){\n                case \"}\":\n                case \"{\":\n                case \"]\":\n                case \"[\":\n                    charsArray.push(\"\\\\\" + char);\n                    break;\n                default:\n                    charsArray.push(char)\n            }\n        }\n        const re = RegExp(`^[${charsArray.join(\"\")}]+|[${charsArray.join(\"\")}]+$`, \"g\");\n        return string.replace(re, '');\n    }\n}\n\nexport function getEnv(envName, defaultValue) {\n    return process.env[envName] || defaultValue;\n}\n\nexport function canonizeFileName(filename) {\n    return path.normalize(filename.replace(/[\\\\\\/]/g, '/'));\n}\n\nexport function getTimeInNanoseconds() {\n    let hrtime_result = process.hrtime();\n    let seconds = hrtime_result[0];\n    let nanoseconds_remainder = hrtime_result[1];\n    return (seconds * NUM_OF_NANO_IN_SECONDS) + nanoseconds_remainder;\n}\n\nexport function MSToNS(milliseconds) {\n    return milliseconds * 1000000;\n}\n\nexport function NanosecToMillisec(nanoseconds) {\n    return nanoseconds / 1000000;\n}\n\nexport function emptyCallack() {\n\n}\n\nexport function getProcessTimeInMillisWithDecimal() {\n    // process.hrtime() gives a tuple (seconds, nanoseconds) -> we convert to milliseconds with decimal\n    const hrTime = process.hrtime();\n    return hrTime[0] * 1000 + hrTime[1] / 1e6;\n}\n\nexport function conditionalRequire(filename) {\n    try {\n        return require(`${filename}`);\n    } catch (err) {\n        return undefined;\n    }\n}"],"file":"utils.js"}