{"version":3,"sources":["../../../src/services/SystemDataCollector.js"],"names":["os","require","process","config","ProcessUsage","constructor","cpu","globalCpu","virtualMemory","startTime","uptime","UsageMeasure","usage","total","getGlobalUserCpuTicks","totalGlobalUsage","totalTick","cpus","i","len","length","type","times","user","globalUsage","getProcessCpuTicks","processCpuUsage","cpuUsage","system","getCpuTicks","globalCpuTicks","processCpuTicks","global","getCpuAverage","startMeasure","endMeasure","usageDifference","totalDifference","percentageUserCPU","getCpuAverageFromTicks","startTicks","endTicks","processMeasureStart","processMeasureEnd","globalMeasureStart","globalMeasureEnd","collectDataRunning","calculateCpuInterval","SystemDataCollector","lastUsage","previousCpuTicks","collectDataTimeout","getLastUsage","systemDataCollector","start","setTimeout","collectData","unref","close","clearTimeout","clearInterval","MS_PER_SECOND","localTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","nowDate","Date","now","toLocaleString","setInterval","currentCpuTicks","cpuAverage","memoryUsage","rss","e","MonitorConfiguration","CPU_CHECK_GAP"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst os = require('os')\r\nconst process = require('process');\r\nconst config = require('../config')\r\n\r\n\r\nexport class ProcessUsage {\r\n    constructor(cpu, globalCpu, virtualMemory, startTime, uptime) {\r\n        this.cpu = cpu;\r\n        this.globalCpu = globalCpu;\r\n        this.virtualMemory = virtualMemory;\r\n        this.startTime = startTime;\r\n        this.uptime = uptime;\r\n    }\r\n}\r\n\r\n\r\nclass UsageMeasure {\r\n    constructor(usage, total) {\r\n        this.usage = usage;\r\n        this.total = total;\r\n    }\r\n}\r\n\r\nfunction getGlobalUserCpuTicks() {\r\n    let totalGlobalUsage = 0, totalTick = 0;\r\n    let cpus = os.cpus();\r\n\r\n    for(let i = 0, len = cpus.length; i < len; i++) {\r\n        let cpu = cpus[i];\r\n\r\n        for(let type in cpu.times) {\r\n            totalTick += cpu.times[type];\r\n        }\r\n\r\n        totalGlobalUsage += cpu.times.user;\r\n    }\r\n\r\n    return {globalUsage: totalGlobalUsage, total: totalTick};\r\n}\r\n\r\nfunction getProcessCpuTicks() {\r\n    // returns process cpu time usage in milliseconds\r\n    let processCpuUsage = process.cpuUsage();\r\n\r\n    return (processCpuUsage.user + processCpuUsage.system) / 1000\r\n}\r\n\r\nfunction getCpuTicks() {\r\n    let globalCpuTicks = getGlobalUserCpuTicks();\r\n    let processCpuTicks = getProcessCpuTicks();\r\n\r\n    return {global: globalCpuTicks.globalUsage,  process: processCpuTicks, total: globalCpuTicks.total};\r\n}\r\n\r\nfunction getCpuAverage(startMeasure, endMeasure) {\r\n    let usageDifference = endMeasure.usage - startMeasure.usage;\r\n    let totalDifference = endMeasure.total - startMeasure.total;\r\n    let percentageUserCPU = 100 * usageDifference / totalDifference;\r\n\r\n    return percentageUserCPU;\r\n}\r\n\r\nfunction getCpuAverageFromTicks(startTicks, endTicks) {\r\n    let processMeasureStart = new UsageMeasure(startTicks.process, startTicks.total);\r\n    let processMeasureEnd = new UsageMeasure(endTicks.process, endTicks.total);\r\n    let globalMeasureStart = new UsageMeasure(startTicks.global, startTicks.total);\r\n    let globalMeasureEnd = new UsageMeasure(endTicks.global, endTicks.total);\r\n\r\n    return {process: getCpuAverage(processMeasureStart, processMeasureEnd), global: getCpuAverage(globalMeasureStart, globalMeasureEnd)}\r\n}\r\n\r\n\r\nlet collectDataRunning = false;\r\nlet calculateCpuInterval = null;\r\n\r\nexport class SystemDataCollector {\r\n    constructor() {\r\n        this.lastUsage = null;\r\n        this.previousCpuTicks = null;\r\n        this.collectDataTimeout = null;\r\n    }\r\n\r\n    getLastUsage() {\r\n        return systemDataCollector.lastUsage;\r\n    }\r\n\r\n    start() {\r\n        if (collectDataRunning) {\r\n            return;\r\n        }\r\n\r\n        collectDataRunning = true;\r\n        this.collectDataTimeout = setTimeout(this.collectData, 0).unref();\r\n    }\r\n\r\n    close() {\r\n        collectDataRunning = false;\r\n\r\n        clearTimeout(this.collectDataTimeout);\r\n        clearInterval(calculateCpuInterval)\r\n    }\r\n\r\n    collectData() {\r\n        try {\r\n            this.previousCpuTicks = getCpuTicks();\r\n            const MS_PER_SECOND = 1000;\r\n            let localTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n            let nowDate = Date.now();\r\n            let startTime = new Date(nowDate - process.uptime() * MS_PER_SECOND).toLocaleString('en-US', {timeZone: localTimeZone});\r\n            let uptime = new Date(nowDate - os.uptime() * MS_PER_SECOND).toLocaleString('en-US', {timeZone: localTimeZone});\r\n\r\n            calculateCpuInterval = setInterval(() => {\r\n                try {\r\n                    if (!collectDataRunning) return;\r\n\r\n                    let currentCpuTicks = getCpuTicks();\r\n                    let cpuAverage = getCpuAverageFromTicks(this.previousCpuTicks, currentCpuTicks);\r\n                    this.previousCpuTicks = currentCpuTicks;\r\n                    let virtualMemory = process.memoryUsage().rss;\r\n\r\n                    systemDataCollector.lastUsage = new ProcessUsage(cpuAverage.process, cpuAverage.global, virtualMemory, startTime, uptime);\r\n                } catch (e) {}\r\n            }, config.MonitorConfiguration.CPU_CHECK_GAP).unref();\r\n        } catch (e) {}\r\n    }\r\n}\r\n\r\nexport let systemDataCollector = new SystemDataCollector();\r\n"],"file":"SystemDataCollector.js"}